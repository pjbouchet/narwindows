<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>absl/algorithm/algorithm.h - external/github.com/abseil/abseil-cpp - Git at Google</title><link rel="stylesheet" type="text/css" href="/+static/base.css"><link rel="stylesheet" type="text/css" href="/+static/prettify/prettify.css"><!-- default customHeadTagPart --></head><body class="Site"><header class="Site-header"><div class="Header"><a class="Header-image" href="/"><img src="//www.gstatic.com/images/branding/lockups/2x/lockup_git_color_108x24dp.png" width="108" height="24" alt="Google Git"></a><div class="Header-menu"> <a class="Header-menuItem" href="https://accounts.google.com/AccountChooser?service=gerritcodereview&amp;continue=https://chromium.googlesource.com/login/external/github.com/abseil/abseil-cpp/%2B/HEAD/absl/algorithm/algorithm.h">Sign in</a> </div></div></header><div class="Site-content"><div class="Container "><div class="Breadcrumbs"><a class="Breadcrumbs-crumb" href="/?format=HTML">chromium</a> / <a class="Breadcrumbs-crumb" href="/external/">external</a> / <a class="Breadcrumbs-crumb" href="/external/github.com/">github.com</a> / <a class="Breadcrumbs-crumb" href="/external/github.com/abseil/">abseil</a> / <a class="Breadcrumbs-crumb" href="/external/github.com/abseil/abseil-cpp/">abseil-cpp</a> / <a class="Breadcrumbs-crumb" href="/external/github.com/abseil/abseil-cpp/+/HEAD">HEAD</a> / <a class="Breadcrumbs-crumb" href="/external/github.com/abseil/abseil-cpp/+/HEAD/">.</a> / <a class="Breadcrumbs-crumb" href="/external/github.com/abseil/abseil-cpp/+/HEAD/absl">absl</a> / <a class="Breadcrumbs-crumb" href="/external/github.com/abseil/abseil-cpp/+/HEAD/absl/algorithm">algorithm</a> / <span class="Breadcrumbs-crumb">algorithm.h</span></div><div class="u-sha1 u-monospace BlobSha1">blob: e9b4733872788dc25ceaace921625209983c40a1 [<a href="/external/github.com/abseil/abseil-cpp/+/HEAD/absl/algorithm/algorithm.h">file</a>] [<a href="/external/github.com/abseil/abseil-cpp/+log/HEAD/absl/algorithm/algorithm.h">log</a>] [<a href="/external/github.com/abseil/abseil-cpp/+blame/HEAD/absl/algorithm/algorithm.h">blame</a>]</div><table class="FileContents"><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="1"></td><td class="FileContents-lineContents" id="1"><span class="com">// Copyright 2017 The Abseil Authors.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="2"></td><td class="FileContents-lineContents" id="2"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="3"></td><td class="FileContents-lineContents" id="3"><span class="com">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="4"></td><td class="FileContents-lineContents" id="4"><span class="com">// you may not use this file except in compliance with the License.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="5"></td><td class="FileContents-lineContents" id="5"><span class="com">// You may obtain a copy of the License at</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="6"></td><td class="FileContents-lineContents" id="6"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="7"></td><td class="FileContents-lineContents" id="7"><span class="com">//      https://www.apache.org/licenses/LICENSE-2.0</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="8"></td><td class="FileContents-lineContents" id="8"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="9"></td><td class="FileContents-lineContents" id="9"><span class="com">// Unless required by applicable law or agreed to in writing, software</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="10"></td><td class="FileContents-lineContents" id="10"><span class="com">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="11"></td><td class="FileContents-lineContents" id="11"><span class="com">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="12"></td><td class="FileContents-lineContents" id="12"><span class="com">// See the License for the specific language governing permissions and</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="13"></td><td class="FileContents-lineContents" id="13"><span class="com">// limitations under the License.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="14"></td><td class="FileContents-lineContents" id="14"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="15"></td><td class="FileContents-lineContents" id="15"><span class="com">// -----------------------------------------------------------------------------</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="16"></td><td class="FileContents-lineContents" id="16"><span class="com">// File: algorithm.h</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="17"></td><td class="FileContents-lineContents" id="17"><span class="com">// -----------------------------------------------------------------------------</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="18"></td><td class="FileContents-lineContents" id="18"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="19"></td><td class="FileContents-lineContents" id="19"><span class="com">// This header file contains Google extensions to the standard &lt;algorithm&gt; C++</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="20"></td><td class="FileContents-lineContents" id="20"><span class="com">// header.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="21"></td><td class="FileContents-lineContents" id="21"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="22"></td><td class="FileContents-lineContents" id="22"><span class="com">#ifndef</span><span class="pln"> ABSL_ALGORITHM_ALGORITHM_H_</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="23"></td><td class="FileContents-lineContents" id="23"><span class="com">#define</span><span class="pln"> ABSL_ALGORITHM_ALGORITHM_H_</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="24"></td><td class="FileContents-lineContents" id="24"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="25"></td><td class="FileContents-lineContents" id="25"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;algorithm&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="26"></td><td class="FileContents-lineContents" id="26"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iterator&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="27"></td><td class="FileContents-lineContents" id="27"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;type_traits&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="28"></td><td class="FileContents-lineContents" id="28"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="29"></td><td class="FileContents-lineContents" id="29"><span class="com">#include</span><span class="pln"> </span><span class="str">&quot;absl/base/config.h&quot;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="30"></td><td class="FileContents-lineContents" id="30"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="31"></td><td class="FileContents-lineContents" id="31"><span class="kwd">namespace</span><span class="pln"> absl </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="32"></td><td class="FileContents-lineContents" id="32"><span class="pln">ABSL_NAMESPACE_BEGIN</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="33"></td><td class="FileContents-lineContents" id="33"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="34"></td><td class="FileContents-lineContents" id="34"><span class="kwd">namespace</span><span class="pln"> algorithm_internal </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="35"></td><td class="FileContents-lineContents" id="35"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="36"></td><td class="FileContents-lineContents" id="36"><span class="com">// Performs comparisons with operator==, similar to C++14&#39;s `std::equal_to&lt;&gt;`.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="37"></td><td class="FileContents-lineContents" id="37"><span class="kwd">struct</span><span class="pln"> </span><span class="typ">EqualTo</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="38"></td><td class="FileContents-lineContents" id="38"><span class="pln">  </span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> U</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="39"></td><td class="FileContents-lineContents" id="39"><span class="pln">  </span><span class="kwd">bool</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">()(</span><span class="kwd">const</span><span class="pln"> T</span><span class="pun">&amp;</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> U</span><span class="pun">&amp;</span><span class="pln"> b</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="40"></td><td class="FileContents-lineContents" id="40"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> a </span><span class="pun">==</span><span class="pln"> b</span><span class="pun">;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="41"></td><td class="FileContents-lineContents" id="41"><span class="pln">  </span><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="42"></td><td class="FileContents-lineContents" id="42"><span class="pun">};</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="43"></td><td class="FileContents-lineContents" id="43"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="44"></td><td class="FileContents-lineContents" id="44"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">Pred</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="45"></td><td class="FileContents-lineContents" id="45"><span class="kwd">bool</span><span class="pln"> </span><span class="typ">EqualImpl</span><span class="pun">(</span><span class="typ">InputIter1</span><span class="pln"> first1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pln"> first2</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="46"></td><td class="FileContents-lineContents" id="46"><span class="pln">               </span><span class="typ">InputIter2</span><span class="pln"> last2</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pred</span><span class="pln"> pred</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">input_iterator_tag</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="47"></td><td class="FileContents-lineContents" id="47"><span class="pln">               std</span><span class="pun">::</span><span class="pln">input_iterator_tag</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="48"></td><td class="FileContents-lineContents" id="48"><span class="pln">  </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="49"></td><td class="FileContents-lineContents" id="49"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">first1 </span><span class="pun">==</span><span class="pln"> last1</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> first2 </span><span class="pun">==</span><span class="pln"> last2</span><span class="pun">;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="50"></td><td class="FileContents-lineContents" id="50"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">first2 </span><span class="pun">==</span><span class="pln"> last2</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="51"></td><td class="FileContents-lineContents" id="51"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">pred</span><span class="pun">(*</span><span class="pln">first1</span><span class="pun">,</span><span class="pln"> </span><span class="pun">*</span><span class="pln">first2</span><span class="pun">))</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="52"></td><td class="FileContents-lineContents" id="52"><span class="pln">    </span><span class="pun">++</span><span class="pln">first1</span><span class="pun">;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="53"></td><td class="FileContents-lineContents" id="53"><span class="pln">    </span><span class="pun">++</span><span class="pln">first2</span><span class="pun">;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="54"></td><td class="FileContents-lineContents" id="54"><span class="pln">  </span><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="55"></td><td class="FileContents-lineContents" id="55"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="56"></td><td class="FileContents-lineContents" id="56"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="57"></td><td class="FileContents-lineContents" id="57"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">Pred</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="58"></td><td class="FileContents-lineContents" id="58"><span class="kwd">bool</span><span class="pln"> </span><span class="typ">EqualImpl</span><span class="pun">(</span><span class="typ">InputIter1</span><span class="pln"> first1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pln"> first2</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="59"></td><td class="FileContents-lineContents" id="59"><span class="pln">               </span><span class="typ">InputIter2</span><span class="pln"> last2</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pred</span><span class="pun">&amp;&amp;</span><span class="pln"> pred</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">random_access_iterator_tag</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="60"></td><td class="FileContents-lineContents" id="60"><span class="pln">               std</span><span class="pun">::</span><span class="pln">random_access_iterator_tag</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="61"></td><td class="FileContents-lineContents" id="61"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">last1 </span><span class="pun">-</span><span class="pln"> first1 </span><span class="pun">==</span><span class="pln"> last2 </span><span class="pun">-</span><span class="pln"> first2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="62"></td><td class="FileContents-lineContents" id="62"><span class="pln">         std</span><span class="pun">::</span><span class="pln">equal</span><span class="pun">(</span><span class="pln">first1</span><span class="pun">,</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> first2</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">forward</span><span class="pun">&lt;</span><span class="typ">Pred</span><span class="pun">&gt;(</span><span class="pln">pred</span><span class="pun">));</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="63"></td><td class="FileContents-lineContents" id="63"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="64"></td><td class="FileContents-lineContents" id="64"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="65"></td><td class="FileContents-lineContents" id="65"><span class="com">// When we are using our own internal predicate that just applies operator==, we</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="66"></td><td class="FileContents-lineContents" id="66"><span class="com">// forward to the non-predicate form of std::equal. This enables an optimization</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="67"></td><td class="FileContents-lineContents" id="67"><span class="com">// in libstdc++ that can result in std::memcmp being used for integer types.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="68"></td><td class="FileContents-lineContents" id="68"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="69"></td><td class="FileContents-lineContents" id="69"><span class="kwd">bool</span><span class="pln"> </span><span class="typ">EqualImpl</span><span class="pun">(</span><span class="typ">InputIter1</span><span class="pln"> first1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pln"> first2</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="70"></td><td class="FileContents-lineContents" id="70"><span class="pln">               </span><span class="typ">InputIter2</span><span class="pln"> last2</span><span class="pun">,</span><span class="pln"> algorithm_internal</span><span class="pun">::</span><span class="typ">EqualTo</span><span class="pln"> </span><span class="com">/* unused */</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="71"></td><td class="FileContents-lineContents" id="71"><span class="pln">               std</span><span class="pun">::</span><span class="pln">random_access_iterator_tag</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="72"></td><td class="FileContents-lineContents" id="72"><span class="pln">               std</span><span class="pun">::</span><span class="pln">random_access_iterator_tag</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="73"></td><td class="FileContents-lineContents" id="73"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">last1 </span><span class="pun">-</span><span class="pln"> first1 </span><span class="pun">==</span><span class="pln"> last2 </span><span class="pun">-</span><span class="pln"> first2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="74"></td><td class="FileContents-lineContents" id="74"><span class="pln">         std</span><span class="pun">::</span><span class="pln">equal</span><span class="pun">(</span><span class="pln">first1</span><span class="pun">,</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> first2</span><span class="pun">);</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="75"></td><td class="FileContents-lineContents" id="75"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="76"></td><td class="FileContents-lineContents" id="76"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="77"></td><td class="FileContents-lineContents" id="77"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">It</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="78"></td><td class="FileContents-lineContents" id="78"><span class="typ">It</span><span class="pln"> </span><span class="typ">RotateImpl</span><span class="pun">(</span><span class="typ">It</span><span class="pln"> first</span><span class="pun">,</span><span class="pln"> </span><span class="typ">It</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> </span><span class="typ">It</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">true_type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="79"></td><td class="FileContents-lineContents" id="79"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">rotate</span><span class="pun">(</span><span class="pln">first</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">);</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="80"></td><td class="FileContents-lineContents" id="80"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="81"></td><td class="FileContents-lineContents" id="81"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="82"></td><td class="FileContents-lineContents" id="82"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">It</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="83"></td><td class="FileContents-lineContents" id="83"><span class="typ">It</span><span class="pln"> </span><span class="typ">RotateImpl</span><span class="pun">(</span><span class="typ">It</span><span class="pln"> first</span><span class="pun">,</span><span class="pln"> </span><span class="typ">It</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> </span><span class="typ">It</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">false_type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="84"></td><td class="FileContents-lineContents" id="84"><span class="pln">  std</span><span class="pun">::</span><span class="pln">rotate</span><span class="pun">(</span><span class="pln">first</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">);</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="85"></td><td class="FileContents-lineContents" id="85"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> std</span><span class="pun">::</span><span class="kwd">next</span><span class="pun">(</span><span class="pln">first</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">distance</span><span class="pun">(</span><span class="pln">middle</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">));</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="86"></td><td class="FileContents-lineContents" id="86"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="87"></td><td class="FileContents-lineContents" id="87"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="88"></td><td class="FileContents-lineContents" id="88"><span class="pun">}</span><span class="pln">  </span><span class="com">// namespace algorithm_internal</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="89"></td><td class="FileContents-lineContents" id="89"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="90"></td><td class="FileContents-lineContents" id="90"><span class="com">// equal()</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="91"></td><td class="FileContents-lineContents" id="91"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="92"></td><td class="FileContents-lineContents" id="92"><span class="com">// Compares the equality of two ranges specified by pairs of iterators, using</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="93"></td><td class="FileContents-lineContents" id="93"><span class="com">// the given predicate, returning true iff for each corresponding iterator i1</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="94"></td><td class="FileContents-lineContents" id="94"><span class="com">// and i2 in the first and second range respectively, pred(*i1, *i2) == true</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="95"></td><td class="FileContents-lineContents" id="95"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="96"></td><td class="FileContents-lineContents" id="96"><span class="com">// This comparison takes at most min(`last1` - `first1`, `last2` - `first2`)</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="97"></td><td class="FileContents-lineContents" id="97"><span class="com">// invocations of the predicate. Additionally, if InputIter1 and InputIter2 are</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="98"></td><td class="FileContents-lineContents" id="98"><span class="com">// both random-access iterators, and `last1` - `first1` != `last2` - `first2`,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="99"></td><td class="FileContents-lineContents" id="99"><span class="com">// then the predicate is never invoked and the function returns false.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="100"></td><td class="FileContents-lineContents" id="100"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="101"></td><td class="FileContents-lineContents" id="101"><span class="com">// This is a C++11-compatible implementation of C++14 `std::equal`.  See</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="102"></td><td class="FileContents-lineContents" id="102"><span class="com">// https://en.cppreference.com/w/cpp/algorithm/equal for more information.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="103"></td><td class="FileContents-lineContents" id="103"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">Pred</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="104"></td><td class="FileContents-lineContents" id="104"><span class="kwd">bool</span><span class="pln"> equal</span><span class="pun">(</span><span class="typ">InputIter1</span><span class="pln"> first1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pln"> first2</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="105"></td><td class="FileContents-lineContents" id="105"><span class="pln">           </span><span class="typ">InputIter2</span><span class="pln"> last2</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pred</span><span class="pun">&amp;&amp;</span><span class="pln"> pred</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="106"></td><td class="FileContents-lineContents" id="106"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> algorithm_internal</span><span class="pun">::</span><span class="typ">EqualImpl</span><span class="pun">(</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="107"></td><td class="FileContents-lineContents" id="107"><span class="pln">      first1</span><span class="pun">,</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> first2</span><span class="pun">,</span><span class="pln"> last2</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">forward</span><span class="pun">&lt;</span><span class="typ">Pred</span><span class="pun">&gt;(</span><span class="pln">pred</span><span class="pun">),</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="108"></td><td class="FileContents-lineContents" id="108"><span class="pln">      </span><span class="kwd">typename</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">iterator_traits</span><span class="pun">&lt;</span><span class="typ">InputIter1</span><span class="pun">&gt;::</span><span class="pln">iterator_category</span><span class="pun">{},</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="109"></td><td class="FileContents-lineContents" id="109"><span class="pln">      </span><span class="kwd">typename</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">iterator_traits</span><span class="pun">&lt;</span><span class="typ">InputIter2</span><span class="pun">&gt;::</span><span class="pln">iterator_category</span><span class="pun">{});</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="110"></td><td class="FileContents-lineContents" id="110"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="111"></td><td class="FileContents-lineContents" id="111"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="112"></td><td class="FileContents-lineContents" id="112"><span class="com">// Overload of equal() that performs comparison of two ranges specified by pairs</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="113"></td><td class="FileContents-lineContents" id="113"><span class="com">// of iterators using operator==.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="114"></td><td class="FileContents-lineContents" id="114"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="115"></td><td class="FileContents-lineContents" id="115"><span class="kwd">bool</span><span class="pln"> equal</span><span class="pun">(</span><span class="typ">InputIter1</span><span class="pln"> first1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter1</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIter2</span><span class="pln"> first2</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="116"></td><td class="FileContents-lineContents" id="116"><span class="pln">           </span><span class="typ">InputIter2</span><span class="pln"> last2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="117"></td><td class="FileContents-lineContents" id="117"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> absl</span><span class="pun">::</span><span class="pln">equal</span><span class="pun">(</span><span class="pln">first1</span><span class="pun">,</span><span class="pln"> last1</span><span class="pun">,</span><span class="pln"> first2</span><span class="pun">,</span><span class="pln"> last2</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="118"></td><td class="FileContents-lineContents" id="118"><span class="pln">                     algorithm_internal</span><span class="pun">::</span><span class="typ">EqualTo</span><span class="pun">{});</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="119"></td><td class="FileContents-lineContents" id="119"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="120"></td><td class="FileContents-lineContents" id="120"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="121"></td><td class="FileContents-lineContents" id="121"><span class="com">// linear_search()</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="122"></td><td class="FileContents-lineContents" id="122"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="123"></td><td class="FileContents-lineContents" id="123"><span class="com">// Performs a linear search for `value` using the iterator `first` up to</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="124"></td><td class="FileContents-lineContents" id="124"><span class="com">// but not including `last`, returning true if [`first`, `last`) contains an</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="125"></td><td class="FileContents-lineContents" id="125"><span class="com">// element equal to `value`.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="126"></td><td class="FileContents-lineContents" id="126"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="127"></td><td class="FileContents-lineContents" id="127"><span class="com">// A linear search is of O(n) complexity which is guaranteed to make at most</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="128"></td><td class="FileContents-lineContents" id="128"><span class="com">// n = (`last` - `first`) comparisons. A linear search over short containers</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="129"></td><td class="FileContents-lineContents" id="129"><span class="com">// may be faster than a binary search, even when the container is sorted.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="130"></td><td class="FileContents-lineContents" id="130"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">InputIterator</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">EqualityComparable</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="131"></td><td class="FileContents-lineContents" id="131"><span class="kwd">bool</span><span class="pln"> linear_search</span><span class="pun">(</span><span class="typ">InputIterator</span><span class="pln"> first</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InputIterator</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="132"></td><td class="FileContents-lineContents" id="132"><span class="pln">                   </span><span class="kwd">const</span><span class="pln"> </span><span class="typ">EqualityComparable</span><span class="pun">&amp;</span><span class="pln"> value</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="133"></td><td class="FileContents-lineContents" id="133"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">find</span><span class="pun">(</span><span class="pln">first</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">)</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="134"></td><td class="FileContents-lineContents" id="134"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="135"></td><td class="FileContents-lineContents" id="135"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="136"></td><td class="FileContents-lineContents" id="136"><span class="com">// rotate()</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="137"></td><td class="FileContents-lineContents" id="137"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="138"></td><td class="FileContents-lineContents" id="138"><span class="com">// Performs a left rotation on a range of elements (`first`, `last`) such that</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="139"></td><td class="FileContents-lineContents" id="139"><span class="com">// `middle` is now the first element. `rotate()` returns an iterator pointing to</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="140"></td><td class="FileContents-lineContents" id="140"><span class="com">// the first element before rotation. This function is exactly the same as</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="141"></td><td class="FileContents-lineContents" id="141"><span class="com">// `std::rotate`, but fixes a bug in gcc</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="142"></td><td class="FileContents-lineContents" id="142"><span class="com">// &lt;= 4.9 where `std::rotate` returns `void` instead of an iterator.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="143"></td><td class="FileContents-lineContents" id="143"><span class="com">//</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="144"></td><td class="FileContents-lineContents" id="144"><span class="com">// The complexity of this algorithm is the same as that of `std::rotate`, but if</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="145"></td><td class="FileContents-lineContents" id="145"><span class="com">// `ForwardIterator` is not a random-access iterator, then `absl::rotate`</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="146"></td><td class="FileContents-lineContents" id="146"><span class="com">// performs an additional pass over the range to construct the return value.</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="147"></td><td class="FileContents-lineContents" id="147"><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> </span><span class="typ">ForwardIterator</span><span class="pun">&gt;</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="148"></td><td class="FileContents-lineContents" id="148"><span class="typ">ForwardIterator</span><span class="pln"> rotate</span><span class="pun">(</span><span class="typ">ForwardIterator</span><span class="pln"> first</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ForwardIterator</span><span class="pln"> middle</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="149"></td><td class="FileContents-lineContents" id="149"><span class="pln">                       </span><span class="typ">ForwardIterator</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="150"></td><td class="FileContents-lineContents" id="150"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> algorithm_internal</span><span class="pun">::</span><span class="typ">RotateImpl</span><span class="pun">(</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="151"></td><td class="FileContents-lineContents" id="151"><span class="pln">      first</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">,</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="152"></td><td class="FileContents-lineContents" id="152"><span class="pln">      std</span><span class="pun">::</span><span class="pln">is_same</span><span class="pun">&lt;</span><span class="kwd">decltype</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">rotate</span><span class="pun">(</span><span class="pln">first</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">last</span><span class="pun">)),</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="153"></td><td class="FileContents-lineContents" id="153"><span class="pln">                   </span><span class="typ">ForwardIterator</span><span class="pun">&gt;());</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="154"></td><td class="FileContents-lineContents" id="154"><span class="pun">}</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="155"></td><td class="FileContents-lineContents" id="155"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="156"></td><td class="FileContents-lineContents" id="156"><span class="pln">ABSL_NAMESPACE_END</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="157"></td><td class="FileContents-lineContents" id="157"><span class="pun">}</span><span class="pln">  </span><span class="com">// namespace absl</span></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="158"></td><td class="FileContents-lineContents" id="158"></td></tr><tr class="u-pre u-monospace FileContents-line"><td class="u-lineNum u-noSelect FileContents-lineNum" data-line-number="159"></td><td class="FileContents-lineContents" id="159"><span class="com">#endif</span><span class="pln">  </span><span class="com">// ABSL_ALGORITHM_ALGORITHM_H_</span></td></tr></table><script nonce="kgOxOAMj15H10CCXZSNe0A">for (let lineNumEl of document.querySelectorAll('td.u-lineNum')) {lineNumEl.onclick = () => {window.location.hash = `#${lineNumEl.getAttribute('data-line-number')}`;};}</script></div> <!-- Container --></div> <!-- Site-content --><footer class="Site-footer"><div class="Footer"><span class="Footer-poweredBy">Powered by <a href="https://gerrit.googlesource.com/gitiles/">Gitiles</a>| <a href="https://policies.google.com/privacy">Privacy</a>| <a href="https://policies.google.com/terms">Terms</a></span><span class="Footer-formats"><a class="u-monospace Footer-formatsItem" href="?format=TEXT">txt</a> <a class="u-monospace Footer-formatsItem" href="?format=JSON">json</a></span></div></footer></body></html>